class BS:
    """
    Classe usada parar armazenar dados de uma opção europeia para serem calculados métricas utilizando o modelo de Black-Scholes

    ...

    Atributos
    ---------
    d1 : flt

    d2 : flt
        Probabilidade da opção expirar in the money
    Methods
    -------
    get_user_input()
        Requisita entradas do usuário pra construir um objeto com os parametros dados

    """

    def __init__(self, S0, K, T, r, sigma, option_type, t=0):
        self.S0 = S0
        self.K = K
        self.T = T
        self.r = r
        self.sigma = sigma
        self.opt = option_type
        self.t = t

    @property
    def d1(self):
        return (np.log(self.S0 / self.K) + (self.r + 0.5 * self.sigma ** 2) * (self.T - self.t)) / (
                    self.sigma * np.sqrt(self.T - self.t))

    @property
    def d2(self):
        return self.d1 - self.sigma * np.sqrt(self.T - self.t)

    def update(self, initial_time, stock_price, strike):
        if initial_time is not None:
            self.t = initial_time
        if stock_price is not None:
            self.S0 = stock_price
        if strike is not None:
            self.K = strike

    @property
    def price(self):
        """
        Retorna o preço da opção, calculado a partir da solução da equação e Black-Scholes
        """
        if self.opt == "eurocall":
            return self.S0 * scipy.stats.norm.cdf(self.d1, 0.0, 1.0) - self.K * np.exp(
                -self.r * self.T) * scipy.stats.norm.cdf(self.d2, 0.0, 1.0)
        elif self.opt == "europut":
            return (self.K * np.exp(-self.r * (self.T - self.t)) * scipy.stats.norm.cdf(-self.d2, 0.0,
                                                                                        1.0) - self.S0 * scipy.stats.norm.cdf(
                -self.d1, 0.0, 1.0))
        else:
            print("Tipo de opção inválido, defina o tipo igual 1 para uma call e igual a 0 para um put")

    @property
    def delta(self):
        """
        Retorna o delta da opção, a derivada do preço da opção em respeito ao preço da ação
        """
        if self.opt == "eurocall":
            return scipy.stats.norm.cdf(self.d1, 0.0, 1.0)
        elif self.opt == "europut":
            return scipy.stats.norm.cdf(self.d1, 0.0, 1.0) - 1
        else:
            print("Tipo de opção inválido, defina o tipo igual 1 para uma call e igual a 0 para um put")

    @property
    def gamma(self):
        """
        Retorna o gamma da opção, a segunda derivada do preço da opção em respeito ao preço da ação
        """
        return (scipy.stats.norm.pdf(self.d1) * np.exp(self.T - self.t)) / (
                    self.S0 * self.sigma * np.sqrt(self.T - self.t))

    @property
    def vega(self):
        """
        Retorna o vega da opção, a derivada do preço da opção em respeito a volatilidade
        """
        return (scipy.stats.norm.pdf(self.d1) * np.exp(self.T - self.t)) * (self.S0 * np.sqrt(self.T - self.t))

    def imp_vol(self, sigma0, actual_price, iter=100):
        # colocar tol
        """
        Obtém a raiz da função BS_price(sigma) - actual_price utilizando o método de newton, onde a a derivada em relação a volatilidade é o vega da opção
        """
        option = BS(self.S0, self.K, self.T, self.r, sigma0, self., self.t)
        for i in range(iter):
            option.sigma = option.sigma - (option.price() - actual_price) / option.vega()
        return option.sigma

    def GBM_path(self, npts=100, seed=2, plot=False):
        np.random.seed(seed)
        n = npts
        ts, dt = np.linspace(0, self.T, n, retstep=True)
        S = np.zeros(n)
        S[0] = self.S0
        Wi = np.random.normal(0, np.sqrt(dt), n)
        W = np.cumsum(Wi)
        for i in range(1, n):
            S[i] = self.S0 * np.exp((r - 0.5 * self.sigma * self.sigma) * ts[i - 1] + self.sigma * W[i])
        if plot == True:
            plt.plot(ts, W)
            plt.show()
        return S, ts

    def delta_hedging(self, npts, n_options=1, seed=2, plot=False,
                      *args):  # estratégia de delta hedging para uma venda de call option
        if not args:
            path, ts = self.GBM_path(npts=npts, seed=seed)
        else:
            path, ts = args
        stocks = np.zeros(len(path))
        deltas = np.zeros(len(path))
        delta_position = np.zeros(len(path))
        cash = np.zeros(len(path))
        cash[0] = self.price
        opt_price = np.zeros(len(path))
        ds_list = []

        for i in range(len(path)):
            opt_price = self.price
            deltas[i] = round(self.delta, 3)
            delta_position[i] = deltas[i] * n_options
            stocks[i] = - delta_position[i] / path[i]
            if i != 0:
                ds = round(stocks[i] - stocks[i - 1], 4)
                cash[i] += ds * path[i]
                ds_list.append(ds)
                if ds > 0:
                    print("actual delta:{}".format(deltas[i]),
                          "Buy {} shares at {}".format(ds, path[i]))
                if ds < 0:
                    print("actual delta:{}".format(deltas[i]),
                          "Sell {} shares at {}".format(ds, path[i]))
            elif i == 0:
                ds = round(stocks[i], 4)
                cash[i] += ds * path[i]
                ds_list.append(ds)
                if ds > 0:
                    print("actual delta:{}".format(deltas[i]),
                          "Buy {} shares at {}".format(ds, path[i]))
                if ds < 0:
                    print("actual delta:{}".format(deltas[i]),
                          "Sell {} shares at {}".format(ds, path[i]))
            self.update(initial_time=ts[i], stock_price=path[i])

        data = {"delta": deltas,
                "shares purchased": ds_list,
                "total_shares": stocks,
                "stock_price": path,
                "delta_position": delta_position}
        df = pd.DataFrame(data=data)
        results = np.array(ds_list) @ path
        return results, df
        # if (stocks[-1]<n_options) and (path[-1]>=self.K):
        #  results = cash[-1] + (n_options - stocks[-1])*(self.K - path[-1])
        # if (stocks[-1]>=n_options) and (path[-1]>=self.K):
        #  results = cash[-1] + (stocks[-1]-n_options)*path[-1]
        # if path[-1]<self.K:
        #  results = cash[-1] + stocks[-1]*path[-1]
        # else:
        # results = cash[-1]
        # return ts,stocks,cash,results

    def stop_loss(self, pct=0, npts=100, seed=2, plot=False,
                  *args):  # estratégia de comprar quando passar do strike e vender quando estiver abaixo
        if not args:
            path, ts = self.GBM_path(npts=npts, seed=seed)
        else:
            path, ts = args
        n = len(path)
        cash = np.zeros(n)
        shares = 0
        buy_list = []
        sell_list = []

        for i in range(len(path)):
            if (path[i] > (1 + pct / 100) * self.K) and (shares == 0):
                shares += 1
                cash[i] -= path[i]
                buy_list.append([ts[i], path[i]])
            if (path[i] < (1 - pct / 100) * self.K) and (shares == 1):
                shares -= 1
                cash[i] += path[i]
                sell_list.append([ts[i], path[i]])
            else:
                pass
        if (shares == 0) and (path[
                                  -1] >= self.K):  # se o preço no tempo final for maior que o strike a opção será executada e o vendedor da call deverá comprar o ativo no preço deste no final do trajeto
            results = cash[-1] + (-path[-1] + self.K)
            buy_list.append([ts[-1], path[-1]])
        if (shares == 1) and (path[
                                  -1] >= self.K):  # se o preço no tempo final for maior que o strike a opção será executada e o vendedor da call não precisará comprar o ativo se já possui
            results = cash[-1] - self.K
        if path[-1] < self.K:  # se o preço estiver abaixo do strike a opção não será executada
            results = cash[-1]
            # MAIS UM IF

        # print(cash)
        # print(shares)
        buy_list = np.array(buy_list)
        sell_list = np.array(sell_list)
        if plot == True:
            plt.figure(figsize=(15, 6))
            plt.plot(ts, path)
            plt.plot(buy_list[:, 0], buy_list[:, 1], linestyle="None", marker="o", color="green", label="Buy")
            plt.plot(sell_list[:, 0], sell_list[:, 1], linestyle="None", marker="o", color="red", label="Sell")
            plt.plot(ts, [self.K] * len(ts), linestyle="dashed", label="Strike")
            if pct != 0:
                plt.plot(ts, [self.K * (1 + pct / 100)] * len(ts), linestyle="dotted", label="Safety margin up")
                plt.plot(ts, [self.K * (1 - pct / 100)] * len(ts), linestyle="dotted", label="Safety margin down")
            plt.legend()

            plt.show()
        # print(buy_list)
        # print(sell_list)
        return results